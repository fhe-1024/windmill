<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
 http://www.springframework.org/schema/mvc
 http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context-4.0.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
 ">

	<context:component-scan base-package="com.mdc">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<aop:aspectj-autoproxy />
	<!-- aop bean 需要配置bean @aspect不会被扫描 -->
	<!-- 这种方式暂时注掉 为了明白事物 -->
	<bean id="myAspect" class="com.mdc.aspect.ServicePointCut"></bean>



	<context:property-placeholder location="classpath:jdbc.properties" />

	<bean id="dataSource" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- runtimeException回滚 -->



	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource"></property> </bean> -->

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>

		<property name="hibernateProperties">
			<props>
				<!-- 设置Hibernate方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- 是否打印sql -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 格式化sql -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 是否自动更新表 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- <prop key="hibernate.current_session_context_class">thread</prop> -->
				<!-- 最大抓取深度，如果为0，则关闭默认的外连接抓取。建议值为0-3 -->
				<prop key="hibernate.max_fetch_depth">1</prop>
				<!-- 用于生成有助于调试的注释信息，默认为关闭 -->
				<prop key="hibernate.use_sql_comments">true</prop>
			</props>
		</property>

		<property name="packagesToScan" value="com.mdc.entity"></property>
	</bean>


	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置JMS连接工厂 -->
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616"></property>
	</bean>
	<!-- 定义消息队列 -->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<!-- 设置消息队列的名字 -->
		<constructor-arg>
			<value>queue1</value>
		</constructor-arg>
	</bean>

	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory"></property>
		<property name="defaultDestination" ref="queueDestination"></property>
		<property name="receiveTimeout" value="10000"></property>
	</bean>

	<!-- <bean id="messageSender" class="com.mdc.mq.MessageSender"> <property 
		name="jmsTemplate" ref="jmsTemplate"></property> </bean> <bean id="messageReceiver" 
		class="com.mdc.mq.MessageReceiver"> <property name="jmsTemplate" ref="jmsTemplate"></property> 
		</bean> -->
	<!-- 定义消息队列(Queue),我们监听一个新的队列,queue2 -->
	<bean id="queueDestination2" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>queue2</value>
		</constructor-arg>
	</bean>
	
<!--  
	<bean id="queueMessageListener" class="com.mdc.mq.QueueMessageListener"></bean>
	
	<bean id="jmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory"></property>
		<property name="destination" ref="queueDestination2"></property>
		<property name="messageListener" ref="queueMessageListener"></property>
	</bean>
-->
	<!-- 定义消息主题(Topic) -->
	<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>topic_queue</value>
		</constructor-arg>
	</bean>

	<!-- 配置JMS模板（Topic），pubSubDomain="true" -->
	<bean id="topicJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultDestination" ref="topicDestination" />
		<property name="pubSubDomain" value="true" />
		<property name="receiveTimeout" value="10000" />
	</bean>
	
	<!--topic消息发布者 -->
	<!-- 
	<bean id="topicProvider" class="com.mdc.mq.TopicProvider">
		<property name="topicJmsTemplate" ref="topicJmsTemplate"></property>
	</bean>
	 -->
	<!-- 消息主题监听者 和 主题监听容器 可以配置多个，即多个订阅者 -->
	<!-- 消息主题监听者(Topic) -->
	<bean id="topicMessageListener" class="com.mdc.mq.TopicMessageListener" />
	<!-- 主题监听容器 （Topic） -->
	<bean id="topicJmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="topicDestination" />
		<property name="messageListener" ref="topicMessageListener" />
	</bean>
	
</beans>